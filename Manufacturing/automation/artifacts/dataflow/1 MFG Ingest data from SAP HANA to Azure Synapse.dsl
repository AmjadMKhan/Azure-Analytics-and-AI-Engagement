source(output(
		ProductKey as string,
		OrderDateKey as string,
		DueDateKey as string,
		ShipDateKey as string,
		CustomerKey as string,
		PromotionKey as string,
		CurrencyKey as string,
		SalesTerritoryKey as string,
		SalesOrderNumber as string,
		SalesOrderLineNumber as string,
		RevisionNumber as string,
		OrderQuantity as string,
		UnitPrice as string,
		ExtendedAmount as string,
		UnitPriceDiscountPct as string,
		DiscountAmount as string,
		ProductStandardCost as string,
		TotalProductCost as string,
		SalesAmount as string,
		TaxAmt as string,
		Freight as string,
		CarrierTrackingNumber as string,
		CustomerPONumber as string,
		OrderDate as string,
		DueDate as string,
		ShipDate as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table',
	staged: false,
	wildcardPaths:['sales']) ~> DatafromSAPHANA
DatafromSAPHANA alterRow(upsertIf(ShipDate==ShipDate)) ~> Last5YearsData
DerivedColumn select(mapColumn(
		ProductKey,
		OrderDateKey,
		DueDateKey,
		ShipDateKey,
		CustomerKey,
		PromotionKey,
		CurrencyKey,
		SalesTerritoryKey,
		SalesOrderNumber,
		SalesOrderLineNumber,
		RevisionNumber,
		OrderQuantity,
		UnitPrice,
		ExtendedAmount,
		UnitPriceDiscountPct,
		DiscountAmount,
		ProductStandardCost,
		TotalProductCost,
		SalesAmount,
		TaxAmt,
		Freight,
		CarrierTrackingNumber,
		CustomerPONumber,
		YearOrderDate = OrderYear,
		DueDate
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> Selectcolumns
Last5YearsData derive(OrderYear = year(toDate(OrderDate)),
		{ OrderMonth} = month(toDate(OrderDate)),
		OrderDay = dayOfYear(toDate(OrderDate)),
		ProductStandardCost = round(toInteger(ProductStandardCost),2),
		UnitPrice = round(toInteger(UnitPrice),4),
		ExtendedAmount = round(toInteger(ExtendedAmount),4)) ~> DerivedColumn
DerivedColumn select(mapColumn(
		ProductKey,
		SalesAmount,
		OrderYear,
		{ OrderMonth},
		OrderDay
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectRequiredColumns
SelectRequiredColumns aggregate(groupBy(ProductKey,
		OrderYear,
		{ OrderMonth},
		OrderDay),
	TotalSales = round(sum(toInteger(SalesAmount)),2),
		AvgSaleAmount = round(avg(toInteger(SalesAmount)),2)) ~> TotalSalesByYearMonthDay
Selectcolumns sink(input(
		ProductKey as string,
		OrderDateKey as string,
		DueDateKey as string,
		ShipDateKey as integer,
		CustomerKey as string,
		PromotionKey as string,
		CurrencyKey as string,
		SalesTerritoryKey as string,
		SalesOrderNumber as string,
		SalesOrderLineNumber as string,
		RevisionNumber as integer,
		OrderQuantity as integer,
		UnitPrice as double,
		ExtendedAmount as double,
		UnitPriceDiscountPct as double,
		DiscountAmount as double,
		ProductStandardCost as double,
		TotalProductCost as double,
		SalesAmount as double,
		TaxAmt as double,
		Freight as double,
		CarrierTrackingNumber as string,
		CustomerPONumber as string,
		OrderDate as integer,
		DueDate as integer,
		ShipDate as date
	),
	allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	format: 'table',
	staged: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> LoadtoAzureSynapse
TotalSalesByYearMonthDay sink(input(
		OrderYear as integer,
		OrderMonth as integer,
		OrderDay as integer,
		ProductKey as string,
		TotalSales as double,
		AvgSaleAmount as double
	),
	allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	format: 'table',
	staged: true,
	mapColumn(
		OrderYear,
		OrderMonth = { OrderMonth},
		OrderDay,
		ProductKey,
		TotalSales,
		AvgSaleAmount
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> AggregatedSalessAPHANA